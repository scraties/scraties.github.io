<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.scraty.top</id>
    <title>scraty&apos;s Blog</title>
    <updated>2021-11-18T09:19:27.478Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.scraty.top"/>
    <link rel="self" href="https://www.scraty.top/atom.xml"/>
    <logo>https://www.scraty.top/images/avatar.png</logo>
    <icon>https://www.scraty.top/favicon.ico</icon>
    <rights>All rights reserved 2021, scraty&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[两种结构型设计模式]]></title>
        <id>https://www.scraty.top/post/TwoStructualPatterns/</id>
        <link href="https://www.scraty.top/post/TwoStructualPatterns/">
        </link>
        <updated>2021-07-05T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>本文介绍了两种结构型设计模式——适配器模式和装饰器模式。</p>
]]></summary>
        <content type="html"><![CDATA[<p>本文介绍了两种结构型设计模式——适配器模式和装饰器模式。</p>
<!--more-->
<h2 id="适配器模式">适配器模式</h2>
<p>适配器模式就是<strong>用另一个类</strong>作为“适配器”，<strong>将原来的类的操作转换成用户需要的形式</strong>。用户只需要和这个“适配器”打交道，而不需要和原来的类打交道，“适配器”通过<strong>委托</strong>（也就是说，原来的类作为“适配器”的属性）调用原来的类的方法完成任务。</p>
<p>对于：</p>
<pre><code class="language-java">class LegacyRectangle {
    void display(int x1, int y1, int w, int h) {...}
}
class Client {
    public display() {
        new LegacyRectangle().display(x1, y1, x2, y2);
    }
}
</code></pre>
<p>增加“适配器”：</p>
<pre><code class="language-java">class Rectangle{
    LegacyRectangle rectangle = new LegacyRectangle();
    void display(int x1, int y1, int x2, int y2) {
        rectangle.display(x1, y1, x2, y2);
    }
}
class LegacyRectangle implements Shape{
    void display(int x1, int y1, int w, int h) {...}
}
class Client {
    public display() {
        Rectangle rectangle = new Rectangle();
        rectangle.display(x1, y1, x2, y2);
    }
}
</code></pre>
<p>现在用户跟<code>LegacyRectangle</code>就被<code>Rectangle</code>**”适配“**了，用户只需要使用<code>Rectangle</code>里的操作即可。</p>
<h2 id="装饰器模式">装饰器模式</h2>
<p>我们知道如果想要给一个ADT增加特性的话，我们可以写一个子类，重写父类中的方法。这样的确可以增加特性，但是如果我们想要将这些特性组合起来，我们就会遇到问题。</p>
<p>因为这些子类相互之间没有关系，我们不得不为这些子类再增加子类来实现特性的组合。随着特性的增多，可能我们还得实现子类的子类的子类，以及子类的子类的子类的子类，这就会产生<strong>组合爆炸</strong>的问题。</p>
<p>装饰器模式正是用来解决这个问题的。它将不同的特性通过<strong>层层嵌套</strong>的方法组合起来，而不需要额外的代码。</p>
<p>对于：</p>
<pre><code class="language-java">interface Stack{
    void push(Item e);
    Item pop();
}
public ArrayStack implements Stack{
    public ArrayStack(){...}
    public void push(Item e){...}
    public Item pop(){...}
}
</code></pre>
<p>我们实现一个通用的装饰器抽象类：</p>
<pre><code class="language-java">public abstract class StackDecorator implements Stack {
    protected final Stack stack;
    public StackDecorator(Stack stack) {
        this.stack = stack;
    }
    public void push(Item e) {
        stack.push(e);
    }
    public Item pop() {
        return stack.pop();
    }
}
</code></pre>
<p>然后实现一个用于加装特性的装饰器具体类：</p>
<pre><code class="language-java">public UndoStack extends StackDecorator implements Stack {
    private final UndoLog log = new UndoLog();
    public UndoStack(Stack stack) {
        super(stack);
    }
    public void push(Item e) {
        log.append(UndoLog.PUSH, e);
        super.push(e);
    }
    public void undo() {
        ...
    }
    ...
}
</code></pre>
<p>当我们想使用加装了特性的<code>Stack</code>的时候，我们可以：</p>
<pre><code class="language-java">Stack t = new UndoStack(new ArrayStack());
</code></pre>
<p>装饰器模式最大的特点是<strong>将<code>Stack</code>作为构造方法的参数，赋给内部的属性</strong>，对这个属性进行复用。这个<code>Stack</code>不仅可以是通用的<code>ArrayStack</code>，<strong>它可以是任何<code>Stack</code>，也就可以是加装了特性后的<code>Stack</code></strong>，例如<code>UndoStack</code>，从而实现了特性组合的方法——层层嵌套。</p>
<p>如果我们再定义两个装饰器具体类：</p>
<pre><code class="language-java">public SynchronizedStack extends StackDecorator implements Stack {...}
public SecureStack extends StackDecorator implements Stack {...}
</code></pre>
<p>我们就可以这样将它们组合起来：</p>
<pre><code class="language-java">Stack s = new SecureStack(new SynchronizedStack(new UndoStack(new ArrayStack())));
</code></pre>
<p>可以看到我们使用层层嵌套实现了特性的组合，不需要多余的代码，没有产生组合爆炸。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[工厂方法设计模式]]></title>
        <id>https://www.scraty.top/post/FactoryMethodPattern/</id>
        <link href="https://www.scraty.top/post/FactoryMethodPattern/">
        </link>
        <updated>2021-06-30T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>本文是对工厂方法设计模式的一个介绍。</p>
]]></summary>
        <content type="html"><![CDATA[<p>本文是对工厂方法设计模式的一个介绍。</p>
<!--more-->
<h2 id="工厂方法模式">工厂方法模式</h2>
<p>工厂方法模式顾名思义就是<strong>创建一个“工厂”方法</strong>来隔离类的使用与具体的类。</p>
<p>对于</p>
<pre><code class="language-java">public interface Animal{...}
public class Cat implements Animal{...}
public class Dog implements Animal{...}
public class Duck implements Animal{...}
public class Donkey implements Animal{...}
...
</code></pre>
<p>我们一般使用的时候会这样：</p>
<pre><code class="language-java">Animal animal = new Dog();
Animal animal2 = new Duck();
</code></pre>
<p>创建一个工厂方法：</p>
<pre><code class="language-java">public Animal getAnimal(int feet) {
	if(feet == 2) return new Duck();
	if(feet == 4) return new Dog();
}
</code></pre>
<p>然后我们可以这样：</p>
<pre><code class="language-java">Animal animal = getAnimal(4);
Animal animal2 = getAnimal(2);
</code></pre>
<p>可以看到，我们将实例化这个过程封装到了工厂方法里，这就将实例化类的责任抛给了工厂方法，用户只需要<strong>提供对于“产品”的描述</strong>（甚至有时候不需要描述，如果用户不在意的话），就可以获得“产品”。</p>
<p>在这个例子里，用户只关心动物脚的个数，工厂方法满足了用户这个需要，让用户只需要提供脚的个数就可以帮助用户做出选择，返回默认的动物。如果想要更换这个动物的话，只需要修改工厂方法即可，不需要修改每个用到实例化的地方。</p>
<p>可以将工厂方法<strong>放在单独的工厂类中</strong>，例如：</p>
<pre><code class="language-java">public AnimalFactory{
    public Animal getAnimal(int feet) {...}
}
</code></pre>
<p>也可以将工厂方法用static修饰，<strong>直接放到“产品”接口里</strong>，例如：</p>
<pre><code class="language-java">public interface Animal{
    public static Animal getAnimal(int feet) {...}
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[计算机系统大作业-C/C++语言的秘密]]></title>
        <id>https://www.scraty.top/post/CSAPP/</id>
        <link href="https://www.scraty.top/post/CSAPP/">
        </link>
        <updated>2021-06-29T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>计算机系统大作业，应课程要求发在博客上。</p>
]]></summary>
        <content type="html"><![CDATA[<p>计算机系统大作业，应课程要求发在博客上。</p>
<!--more-->
<p><img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0002.jpg" alt="2" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0003.jpg" alt="3" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0004.jpg" alt="4" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0005.jpg" alt="5" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0006.jpg" alt="6" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0007.jpg" alt="7" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0008.jpg" alt="8" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0009.jpg" alt="9" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0010.jpg" alt="10" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0011.jpg" alt="11" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0012.jpg" alt="12" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0013.jpg" alt="13" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0014.jpg" alt="14" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0015.jpg" alt="15" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0016.jpg" alt="16" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0017.jpg" alt="17" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0018.jpg" alt="18" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0019.jpg" alt="19" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0020.jpg" alt="20" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0021.jpg" alt="21" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0022.jpg" alt="22" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0023.jpg" alt="23" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0024.jpg" alt="24" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0025.jpg" alt="25" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0026.jpg" alt="26" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0027.jpg" alt="27" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0028.jpg" alt="28" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0029.jpg" alt="29" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0030.jpg" alt="30" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0031.jpg" alt="31" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0032.jpg" alt="32" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0033.jpg" alt="33" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0034.jpg" alt="34" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0035.jpg" alt="35" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0036.jpg" alt="36" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0037.jpg" alt="37" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0038.jpg" alt="38" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0039.jpg" alt="39" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0040.jpg" alt="40" loading="lazy"><br>
<img src="https://www.scraty.top/post-images/CSAPP/CS%E5%A4%A7%E4%BD%9C%E4%B8%9A%E8%AE%BA%E6%96%87_page-0041.jpg" alt="41" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[泛型的类型擦除]]></title>
        <id>https://www.scraty.top/post/TypeErasure/</id>
        <link href="https://www.scraty.top/post/TypeErasure/">
        </link>
        <updated>2021-06-26T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>本文主要介绍泛型在虚拟机中的实现——使用类型擦除的方法。</p>
]]></summary>
        <content type="html"><![CDATA[<p>本文主要介绍泛型在虚拟机中的实现——使用类型擦除的方法。</p>
<!--more-->
<h2 id="类型擦除">类型擦除</h2>
<p><strong>Java虚拟机中没有泛型类型对象</strong>，所有的类都属于普通类。因此Java编译器使用一个普通的类来实现泛型，这个普通类称为相应泛型的<em>原始类型</em>。例如对于如下泛型程序：</p>
<pre><code class="language-java">public class Pair&lt;T&gt; {
    private T first;
    private T second;
    
    public Pair() {
        first = null;
        second = null;
    }
    public Pair(T first T second) {
        this.first = first;
        this.second = second;
    }
    
    public T getFirst() {
        return first;
    }
    public T getSecond() {
        return second;
    }
    
    public void setFirst(T newValue) {
        first = newValue;
    }
    public void setSecond(T newValue) {
        second = newValue;
    }
}
</code></pre>
<p>它的原始类型如下：</p>
<pre><code class="language-java">public class Pair {
    private Object first;
    private Object second;
    
    public Pair() {
        first = null;
        second = null;
    }
    public Pair(Object first Object second) {
        this.first = first;
        this.second = second;
    }
        
    public Object getFirst() {
        return first;
    }
    public Object getSecond() {
        return second;
    }
    
    public void setFirst(Object newValue) {
        first = newValue;
    }
    public void setSecond(Object newValue) {
        second = newValue;
    }
}
</code></pre>
<p>可以看到，<code>&lt;T&gt;</code>没有了，类型变量<code>T</code>被<strong>擦除</strong>了，并替换为了<code>Object</code>。</p>
<p>这里的<code>T</code>没有任何限定，因此替换为<code>Object</code>。如果这里的<code>T</code>有限定的话，会替换为其限定类型。</p>
<p>类型变量的限定使用如下形式：</p>
<pre><code class="language-java">&lt;T extends BoundingType&gt;
</code></pre>
<p>这里的<code>BoundingType</code>就是<strong>限定类型</strong>。上面这种写法将<code>T</code>限定为<code>BoundingType</code>的子类型。</p>
<p><code>T</code>和<code>BoundingType</code>可以是类，也可以是接口。因为Java中可以同时实现多个接口，所以这里的限定类型也可以有多个。多个限定类型使用如下形式：</p>
<pre><code class="language-java">&lt;T extends BoundingType1 &amp; BoundingType2 &amp; BoundingType3 ...&gt;
</code></pre>
<p>但是其中最多有一个可以是类，其他的只能是接口。</p>
<p>有多个限定类型时，会使用第一个限定类型进行类型擦除。</p>
<p>例如对于如下例子：</p>
<pre><code class="language-java">public class Interval&lt;T extends Comparable &amp; Serializable&gt; implements Serializable {
    private T lower;
    private T upper;
    ...
    public Interval(T first, T second) {
        if(first.compareTo(second)) &lt;= 0 {
            lower = first;
            upper = second;
        }
        else {
            lower = second;
            upper = first;
        }
    }
}
</code></pre>
<p>它的原始类型如下：</p>
<pre><code class="language-java">public class Interval implements Serializable {
    private Comparable lower;
    private Comparable upper;
    ...
    public Interval(Comparable first, Comparable second) {
        if(first.compareTo(second)) &lt;= 0 {
            lower = first;
            upper = second;
        }
        else {
            lower = second;
            upper = first;
        }
    }
}
</code></pre>
<h2 id="编译器的作用">编译器的作用</h2>
<p>尽管在虚拟机中，泛型类型实际上是一个普通的类，但是编译器不会让你像使用一个普通的类一样使用它。它会对你的使用加以限制，并自动地帮我们做一些事情，让泛型看起来像一个“泛型”。</p>
<p>这主要有以下两点：</p>
<ul>
<li>调用一个泛型方法时，如果擦除了返回类型，编译器会插入强制类型转换。</li>
<li>编译器使用<em>桥方法</em>来保证泛型子类的多态性。</li>
</ul>
<p>关于第一点，对于下面这个语句序列：</p>
<pre><code class="language-java">Pair&lt;Employee&gt; buddies = ...;
Employee buddy = buddies.getFirst();
</code></pre>
<p>我们知道<code>buddies.getFirst()</code>类型擦除之后返回类型是<code>Object</code>，跟<code>buddy</code>的类型是不一样的。这时候，编译器会自动插入到<code>Employee</code>的强制类型转换。</p>
<p>对<code>buddies.getFirst()</code>方法的调用实际上被编译器转换为两条虚拟机指令：</p>
<ul>
<li>对原始方法<code>Pair.getFirst</code>的调用。</li>
<li>将返回的<code>Object</code>类型强制转换为<code>Employee</code>类型。</li>
</ul>
<p>关于第二点，对于下面这个类：</p>
<pre><code class="language-java">class DateInterval extends Pair&lt;LocalDate&gt; {
    public void setSecond(LocalDate second) {
        if(second.compareTo(getFirst()) &gt;= 0)
            super.setSecond();
    }
    ...
}
</code></pre>
<p>这里它对于<code>setSecond</code>方法的重写应该是有效的，但是它类型擦除之后会变成：</p>
<pre><code class="language-java">class DateInterval extends Pair {
    public void setSecond(LocalDate second) {...}
    ...
}
</code></pre>
<p><code>Pair</code>中<code>setSecond</code>方法参数是<code>Object</code>类型的，因此上面实际上是在重载方法，而不是在重写，<code>DateInterval</code>中还会有一个从<code>Pair</code>继承的方法：</p>
<pre><code class="language-java">public void setSecond(Object second)
</code></pre>
<p>两个方法是不同的，但是它们不应该是不同的。</p>
<p>这时候，编译器会自动生成一个<em>桥方法</em>：</p>
<pre><code class="language-java">public void setSecond(Object second) {
    setSecond((LocalDate) second);
}
</code></pre>
<p>可以看到，编译器用我们编写的方法重写了原来的方法，从而使得我们看上去自己“重写了”原来的方法。</p>
<h2 id="参考资料">参考资料</h2>
<h4 id="书籍">书籍</h4>
<p>Java核心技术 卷Ⅰ 基础知识（原书第11版） 第8章</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[异常类的创建与序列化]]></title>
        <id>https://www.scraty.top/post/MyExceptionAndSerialization/</id>
        <link href="https://www.scraty.top/post/MyExceptionAndSerialization/">
        </link>
        <updated>2021-06-17T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>本文首先介绍了Java异常类的层次结构，然后描述了如何<strong>创建异常类</strong>，最后介绍了在创建异常类的过程中会<strong>遇到的序列化问题</strong>。</p>
]]></summary>
        <content type="html"><![CDATA[<p>本文首先介绍了Java异常类的层次结构，然后描述了如何<strong>创建异常类</strong>，最后介绍了在创建异常类的过程中会<strong>遇到的序列化问题</strong>。</p>
<!--more-->
<p>我们在进行Java编程时经常需要抛出和捕获各种异常，用来处理程序执行过程中可能出现的各种错误。但是我们可能会遇到<strong>任何标准异常类都无法描述清楚的情况</strong>，这时就需要创建自己的异常类。</p>
<h2 id="java异常类的层次结构">Java异常类的层次结构</h2>
<p>Java中所有异常类都派生于<code>Throwable</code>类。但是在<code>Throwable</code>的下一层，有两个分支，分别是：</p>
<ul>
<li>
<p><code>Error</code>：描述了各种我们无能为力的系统内部错误</p>
</li>
<li>
<p><code>Exception</code>：又分为两个分支，<code>RuntimeException</code>类和<strong>其他异常</strong></p>
<p>（注意：<strong><code>IOException</code>只是其他异常的一种</strong>）</p>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://www.scraty.top/post-images/1637209079669.png" alt="Java中的异常层次结构" loading="lazy"></figure>
<p>区分<code>RuntimeException</code>和其他异常的一般规则是：</p>
<ul>
<li>由于<strong>编程错误</strong>导致的异常属于<code>RuntimeException</code></li>
<li>如果程序本身没有问题，那么是其他异常</li>
</ul>
<p><code>Error</code>我们完全无法处理，<code>RuntimeException</code>我们完全可以避免。所以Java编译器只会检查你是否为其他异常提供了异常处理器，而不会检查<code>Error</code>和<code>RuntimeException</code>。</p>
<p>因此<code>Error</code>与<code>RuntimeException</code>被称为**非检查型(unchecked)<strong>异常，其他异常被称为</strong>检查型(checked)**异常。</p>
<h2 id="创建异常类">创建异常类</h2>
<p>从上面的描述可以知道，我们需要创建一个检查型异常，即<code>Exception</code>及其子类（除去<code>RuntimeException</code>）的派生。</p>
<p>因此我们创建一个<code>Exception</code>的子类作为示范。</p>
<p>根据书上描述的习惯做法，我们定义两个构造器，一个是默认的构造器，一个是包含详细信息的构造器，代码如下（注释省略）：</p>
<pre><code class="language-java">public class IntervalConflictException extends Exception {
	public IntervalConflictException() {
	}
	
	public IntervalConflictException(String message) {
		super(message);
	}
}
</code></pre>
<p>但是我们会发现上述代码在eclipse里运行的时候会有<code>Warning</code></p>
<pre><code>The serializable class IntervalConflictException does not declare a static final serialVersionUID field of type long
</code></pre>
<p>eclipse自动增加了一行代码后解决了问题：</p>
<pre><code class="language-java">public class IntervalConflictException extends Exception {
	private static final long serialVersionUID = 1L;
    
	public IntervalConflictException() {
        
	}
	
	public IntervalConflictException(String message) {
		super(message);
	}
}
</code></pre>
<p>那么为什么会出现这个<code>Warning</code>，加了这行代码又为什么可以解决问题呢？</p>
<h2 id="序列化与serializable接口">序列化与<code>Serializable</code>接口</h2>
<p>我们找到<code>Throwable</code>的声明：</p>
<pre><code class="language-java">public class Throwable implements Serializable
</code></pre>
<p>发现<code>Throwable</code>实现了接口<code>Serializable</code></p>
<p>而我们创建的<code>IntervalConflictException</code>是<code>Throwable</code>的派生，根据继承规则，自动实现（<code>implements</code>）了<code>Serializable</code>，而不需要显式的声明。</p>
<p>那么<code>Serializable</code>接口里到底有什么呢，答案是<code>Serializable</code>接口里什么都没有，是一个<strong>空接口</strong>。</p>
<pre><code class="language-java">public interface Serializable {
}
</code></pre>
<p>空接口只是一个标识，只是为了将一些类区分出来。</p>
<p>就好比上课举手。任何听课的人都可以举手，举手只是为了告诉老师，举手的人有话要说。</p>
<p>同样地，<code>Serializable</code>只是告诉Java可以对这个对象进行序列化</p>
<p><code>Serializable</code>是Java序列化的<strong>标识</strong>，实现了它就意味着它的对象可以被<strong>序列化</strong>。</p>
<p>序列化是一种<strong>跨平台储存</strong>和<strong>网络传输</strong>对象的机制。它将<strong>对象</strong>以特定的规则<strong>转化</strong>为<strong>字节数组</strong>，然后通过IO的方式进行跨平台存储和网络传输。反序列化是序列化的逆过程，将字节数组转化回对象。</p>
<p>简单来说，序列化是一种为了方便大家之间传递程序而产生的机制，它使得软件提供商可以将软件分发给你。如果你是单机玩家，那么序列化对你没什么意义。</p>
<p>因此我们创建的<code>IntervalConflictException</code>的对象是可以序列化的，这个类<strong>应该满足序列化的要求</strong>。</p>
<h2 id="serialversionuid"><code>serialVersionUID</code></h2>
<p>序列化的要求之一就是要有<code>serialVersionUID</code>。</p>
<p><code>serialVersionUID</code>是序列化的<strong>版本号</strong>，用来判断对象的版本有没有改变。</p>
<p>如果软件版本发生改变，你的软件可能会让你更新</p>
<p><code>serialVersionUID</code>可以使用两种方式生成：</p>
<ol>
<li>默认的<code>1L</code>。版本变化之后手动改为<code>2L</code>，<code>3L</code>，<code>4L</code>，以此类推；不一定要连续，跟之前的版本不一样就行，重点是<strong>手动更新</strong></li>
<li>使用<strong>hash算法</strong>。通过包名，类名，继承关系，各种方法和属性等用哈希算法生成一个值，只要对代码进行了更改，计算出来的哈希值就会不一样。</li>
</ol>
<p>如果<strong>不显式地声明</strong>一个<code>serialVersionUID</code>，就会使用hash算法<strong>自动生成</strong>一个<code>serialVersionUID</code>。</p>
<p>但是，自动生成的<code>serialVersionUID</code><strong>对类的细节高度敏感</strong>。这会造成两个后果：</p>
<ol>
<li>
<p>只要类修改了一点点，<code>serialVersionUID</code>就会发生变化</p>
</li>
<li>
<p>即使我们没有修改代码，但是这些细节仍然可能<strong>因为编译器的不同</strong>而发生变化，从而使<code>serialVersionUID</code>发生变化，这会导致反序列化时出现问题</p>
<p>（即出现<code>InvalidClassException</code>异常）</p>
</li>
</ol>
<p>大多数时候我们不希望<code>serialVersionUID</code>对细节如此敏感，因此Java编译器会<strong>强烈建议</strong>我们<strong>显式地声明</strong><code>serialVersionUID</code>，从而会弹出一开始的<code>Warning</code>。</p>
<h2 id="参考资料">参考资料</h2>
<h4 id="书籍">书籍</h4>
<p>Java核心技术 卷Ⅰ 基础知识（原书第11版） 第7章</p>
<h4 id="网站">网站</h4>
<p><a href="https://blog.csdn.net/csl_0312/article/details/51058114">关于<code>Throwable</code></a></p>
<p><a href="https://blog.csdn.net/u014750606/article/details/80040130">关于<code>serialVersionUID</code></a></p>
<p><a href="https://mkyong.com/java-best-practices/understand-the-serialversionuid/">依旧关于<code>serialVersionUID</code></a></p>
<p><a href="https://baijiahao.baidu.com/s?id=1633305649182361563&amp;wfr=spider&amp;for=pc">关于<code>Serializable</code>接口</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/40462507">关于序列化</a></p>
<p><a href="https://blog.csdn.net/tree_ifconfig/article/details/82766587">依旧关于序列化</a></p>
<p><a href="https://blog.csdn.net/weixin_42845574/article/details/84395580">关于eclipse报的Warning</a></p>
<p><a href="https://blog.csdn.net/weixin_41570207/article/details/109754073">关于继承</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ADT小结]]></title>
        <id>https://www.scraty.top/post/ADT/</id>
        <link href="https://www.scraty.top/post/ADT/">
        </link>
        <updated>2021-05-30T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>本文是对ADT相关知识点的总结。</p>
]]></summary>
        <content type="html"><![CDATA[<p>本文是对ADT相关知识点的总结。</p>
<!--more-->
<h2 id="adt是什么">ADT是什么</h2>
<p>ADT是抽象数据型(Abstract Data Type)的简称。实际上ADT就是类(class)，只是从不同的视角来看。</p>
<p>ADT认为类是一种数据类型。不过跟传统的数据类型不同的是，ADT不关注数据的具体表示，而是强调“作用于数据上的操作”，认为<strong>这些操作完全定义了数据类型（即ADT）</strong>。</p>
<p>ADT分为两类：</p>
<ul>
<li><code>mutable</code>类型：提供了可以改变内部值的操作。</li>
<li><code>immutable</code>类型：任何操作不改变内部值，而是构造新的对象。</li>
</ul>
<h2 id="adt的四种操作">ADT的四种操作</h2>
<p>ADT的所有操作可以分为四种：</p>
<ul>
<li><code>Creators</code>：构造器，通过其他类型构造出一个本类型的ADT对象。可以实现为构造函数或者静态函数。实现为静态函数时经常被称为工厂方法。</li>
<li><code>Producers</code>：生产器，使用ADT对象生成其他的ADT对象。</li>
<li><code>Observers</code>：观察器，观察ADT对象的属性。</li>
<li><code>Mutators</code>：变值器，改变ADT对象的属性。通常返回<code>void</code>，这时它一定改变了对象的某些内部状态，也可能返回非空类型。<code>immutable</code>类型的ADT一般不能有<code>Mutators</code></li>
</ul>
<p>这四种操作形式上的区别如下：</p>
<ul>
<li><code>Creators</code>：<code>t* -&gt; T</code></li>
<li><code>Producers</code>：<code>T+, t* -&gt; T</code></li>
<li><code>Observers</code>：<code>T+, t* -&gt; t</code></li>
<li><code>Mutators</code>：<code>T+, t* -&gt;void | t | T</code></li>
</ul>
<p>其中<code>T</code>表示ADT自己，<code>t</code>表示其他类型，<code>+</code>表示出现一次或多次，<code>*</code>表示出现0次或多次，<code>|</code>表示或。</p>
<h2 id="表示独立性-不变量与表示泄露">表示独立性、不变量与表示泄露</h2>
<p><code>表示独立性(Representation Independence)</code>就是说客户端(client)在使用ADT的时候无需考虑其内部如何实现，ADT方法的spec（规约）规定了client和ADT之间的契约。也就是说，spec是一道“墙”，墙内外不能相互影响。client不能改变ADT对象内部的值，ADT内部表示的变化不能影响spec和client（即使ADT更换了实现方法，也还是要满足spec）。</p>
<p><code>不变量(Invariants)</code>是为了保持程序的正确性而存在的，它是一组总是正确的条件。不变量是由ADT负责的，跟client无关。应该为ADT规定一个不变量，然后在每个方法中检查这个不变量。</p>
<p><code>表示泄露(rep exposure)</code>就是说ADT外部的代码（指client）可以直接改变ADT内部的属性。这不仅影响了不变性，也影响了表示独立性。</p>
<p>如何避免表示泄露：</p>
<ul>
<li>尽量使用<code>immutable</code>的属性（最好的方法）</li>
<li>尽量使用<code>private</code>和<code>final</code>修饰属性</li>
<li><code>mutable</code>的属性在传入ADT（例如构造方法中）和传出ADT（例如<code>Observer</code>中）时要进行<code>defensive copy</code>（防御性拷贝）</li>
</ul>
<h2 id="af和ri">AF和RI</h2>
<p>每个ADT都有两个空间，一个叫表示空间R，一个叫抽象空间A。抽象空间是client看到的空间，表示空间是ADT开发者看到的空间。</p>
<p><code>AF（抽象函数，Abstraction Function）</code>是R到A的映射，即如何将R中的每一个值解释为A中的每一个值，形式地说，就是<code>AF : R -&gt; A</code>。</p>
<p><code>RI（表示不变性，Rep Invariant）</code>是对表示空间的约束，描述了什么样的表示是“合法的”。可以认为RI是所有表示值的一个自己，包含所有合法的表示值；也可以认为RI是一个条件，描述了什么是“合法”的表示值。</p>
<p>AF和RI跟内部表示有关，当你选择了一种表示抽象值的方式的时候，你就需要指定某个子集是“合法的”（这就是RI），然后你需要为该子集中的每一个值做出“解释”——即如何映射到抽象空间中的值（这就是AF）。</p>
]]></content>
    </entry>
</feed>